---
# tasks file for bootstrap_workstation_macos

- name: "Install Pkgsrc packages"
  tags:
    - packages
    - pkgin
  community.general.pkgin:
    name: "{{ macws_pkgin_pkg_list }}"
    state: present

- name: "Install graphical software with Cask"
  tags:
    - software
    - brew
    - cask
  become: true
  become_user: "{{ item.name }}"
  community.general.homebrew_cask:
    name: "{{ macws_cask_software_list }}"
    state: present
  loop: "{{ macws_users | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Install Homebrew formulaes"
  tags:
    - packages
    - brew
    - formulae
  become: true
  become_user: "{{ item.name }}"
  community.general.homebrew:
    name: "{{ macws_brew_pkg_list }}"
    state: present
  loop: "{{ macws_users | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Install software from Mac App Store"
  tags:
    - software
    - brew
    - mas
  community.general.mas:
    id: "{{ macws_mas_software_list }}"
    state: present

- name: "Create users' directory structure"
  tags:
    - users
    - dirs
  ansible.builtin.file:
    path: "{{ macws_home_dir }}/{{ item.0.name }}/{{ item.1.path }}"
    state: directory
    mode: "{{ item.1.mode }}"
    owner: "{{ item.0.name }}"
    group: "{{ item.0.main_group }}"
    force: true
    recurse: true
  loop: "{{ macws_users | product(macws_directory_structure) | list }}"
  loop_control:
    label: "{{ item.0.name }} {{ item.1 }}"

- name: "Copy wallpaper file"
  tags:
    - desktop
    - wallpaper
  ansible.builtin.copy:
    src: "files/users/nils/wallpaper.png"
    dest: "${HOME}/Pictures/Wallpapers/01_wallpaper.png"
    mode: "0644"

- name: "Configure wallpaper"
  tags:
    - desktop
    - wallpaper
  ansible.builtin.command: "osascript -e 'tell application \"System Events\" to tell every desktop to set picture to \"/Users/nils/Pictures/Wallpapers/01_wallpaper.png\" as POSIX file'" # noqa: yaml[line-length]
  register: osascript_output
  changed_when: osascript_output.rc != 0

- name: "Copy avatar file"
  tags:
    - desktop
    - avatar
  ansible.builtin.copy:
    src: "files/users/nils/avatar.png"
    dest: "${HOME}/Pictures/Avatars/01_avatar.png"
    mode: "0644"

- name: "Clone dotfiles git repository"
  tags:
    - users
    - git
  become: true
  become_user: "{{ item.name }}"
  ansible.builtin.git:
    repo: "https://github.com/ahpnils/dotfiles.git"
    dest: "{{ macws_home_dir }}/{{ item.name }}/Documents/Projects/git/github/ahpnils/dotfiles/"
    version: "{{ macws_dotfiles_commit }}"
    clone: true
    update: true
    umask: "0022"
    force: true
  loop: "{{ macws_users | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Make vim-deps"
  tags:
    - users
    - dotfiles
  ansible.builtin.command:
    cmd: "make vim-deps"
    chdir: "{{ macws_home_dir }}/{{ item.name }}/Documents/Projects/git/github/ahpnils/dotfiles/"
  changed_when: false
  loop: "{{ macws_users | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Make starship-stow"
  tags:
    - users
    - dotfiles
  ansible.builtin.command:
    cmd: "make starship-stow"
    chdir: "{{ macws_home_dir }}/{{ item.name }}/Documents/Projects/git/github/ahpnils/dotfiles/"
  changed_when: false
  loop: "{{ macws_users | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Make stow"
  tags:
    - users
    - dotfiles
  ansible.builtin.command:
    cmd: "make stow"
    chdir: "{{ macws_home_dir }}/{{ item.name }}/Documents/Projects/git/github/ahpnils/dotfiles/"
  changed_when: false
  loop: "{{ macws_users | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Register Firefox Developer Edition path"
  tags:
    - software
    - firefox
  ansible.builtin.stat:
    path: "/Applications/Firefox Developer Edition.app"
  delegate_to: localhost
  register: firefoxdev_exists

- name: "Download Firefox Developer Edition"
  tags:
    - software
    - firefox
  ansible.builtin.get_url:
    url: "https://download.mozilla.org/?product=firefox-devedition-latest-ssl&os=osx&lang=en-US"
    dest: "${HOME}/Downloads/FirefoxDev.dmg"
    mode: "0700"
  when: not firefoxdev_exists.stat.exists

- name: "Mount Firefox Developer Edition dmg"
  tags:
    - software
    - firefox
  ansible.builtin.shell: "hdiutil attach ${HOME}/Downloads/FirefoxDev.dmg -mountpoint '/Volumes/FirefoxDev'"
  register: mount_result
  changed_when: "'/Volumes/FirefoxDev' is exists"
  failed_when: "not '/Volumes/FirefoxDev' is exists"
  when: not firefoxdev_exists.stat.exists

- name: "Install Firefox Developer Edition"
  tags:
    - software
    - firefox
  ansible.builtin.copy:
    src: "/Volumes/FirefoxDev/Firefox Developer Edition.app"
    dest: "/Applications/"
    remote_src: true
    mode: "0700"
  when: not firefoxdev_exists.stat.exists

- name: "Unmount Firefox Developer Edition dmg"
  tags:
    - software
    - firefox
  ansible.builtin.command: "hdiutil detach /Volumes/FirefoxDev"
  register: umount_result
  changed_when: "not '/Volumes/FirefoxDev' is exists"
  when: not firefoxdev_exists.stat.exists

- name: "Customize macOS desktop with defaults"
  tags:
    - desktop
    - apple_defaults
  community.general.osx_defaults:
    domain: "{{ item.domain }}"
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: "{{ item.state }}"
  loop: "{{ macos_apple_defaults_list }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Restart the macOS dock"
  tags:
    - desktop
    - dock
  ansible.builtin.command: "killall Dock"
  changed_when: false
